{
  "openapi": "3.0.0",
  "info": {
    "version": "v0.3.0-beta",
    "title": "üèé Rent-X API Docs",
    "description": "API docs for cars rent application",
    "license": {
      "name": "MIT",
      "url": "https://github.com/MattZ6/rent-x-api/blob/main/LICENSE.md"
    },
    "contact": {
      "name": "Matheus Felipe Zanin",
      "email": "matt_z6@hotmail.com",
      "url": "https://github.com/MattZ6"
    }
  },
  "tags": [
    {
      "name": "User",
      "description": "Endpoints related to the Users's scope"
    },
    {
      "name": "Brand",
      "description": "Endpoints related to the Car Brand's scope"
    },
    {
      "name": "Category",
      "description": "Endpoints related to the Car Category's scope"
    },
    {
      "name": "Specification",
      "description": "Endpoints related to the Car Specification's scope"
    },
    {
      "name": "Admin",
      "description": "Private endpoints for administrative use"
    }
  ],
  "paths": {
    "/v1/auth/sign/in": {
      "post": {
        "tags": ["User"],
        "summary": "Performs User authentication",
        "description": "Performs User authentication",
        "requestBody": {
          "required": true,
          "description": "User's credentials",
          "content": {
            "application/json": {
              "example": {
                "email": "client@rentx.com",
                "password": "clientpass"
              },
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "example": {
                  "access_token": "...",
                  "refresh_token": "..."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Email required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "email",
                        "type": "required",
                        "value": null,
                        "message": "The email field is required."
                      }
                    }
                  },
                  "Email invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "email",
                        "type": "invalid",
                        "value": null,
                        "message": "The email is invalid."
                      }
                    }
                  },
                  "Password required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "password",
                        "type": "required",
                        "value": null,
                        "message": "The password field is required."
                      }
                    }
                  },
                  "Password min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "password",
                        "type": "minlength",
                        "value": 6,
                        "message": "The password must have at least 6 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "code": "user.not.exists",
                  "message": "User not found with provided email."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "example": {
                  "code": "password.wrong",
                  "message": "Wrong password."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/sign/up": {
      "post": {
        "tags": ["User"],
        "summary": "Create a new driver",
        "description": "Create a new driver",
        "requestBody": {
          "required": true,
          "description": "Driver's data",
          "content": {
            "application/json": {
              "example": {
                "name": "Jane Driver",
                "driver_license": "47432729908",
                "email": "jane.driver@rentx.com",
                "password": "janedriverpassword",
                "password_confirmation": "janedriverpassword"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateDriverData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Name required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "required",
                        "value": null,
                        "message": "The name field is required."
                      }
                    }
                  },
                  "Name min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "minlength",
                        "value": 3,
                        "message": "The name must have at least 6 characters"
                      }
                    }
                  },
                  "Driver license required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "driver_license",
                        "type": "required",
                        "value": null,
                        "message": "The driver_license field is required."
                      }
                    }
                  },
                  "Driver license invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "driver_license",
                        "type": "invalid",
                        "value": null,
                        "message": "The driver_license is invalid."
                      }
                    }
                  },
                  "Email required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "email",
                        "type": "required",
                        "value": null,
                        "message": "The email field is required."
                      }
                    }
                  },
                  "Email invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "email",
                        "type": "invalid",
                        "value": null,
                        "message": "The email is invalid."
                      }
                    }
                  },
                  "Password required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "password",
                        "type": "required",
                        "value": null,
                        "message": "The password field is required."
                      }
                    }
                  },
                  "Password min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "password",
                        "type": "minlength",
                        "value": 6,
                        "message": "The password must have at least 6 characters"
                      }
                    }
                  },
                  "Password confirmation required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "password_confirmation",
                        "type": "required",
                        "value": null,
                        "message": "The password_confirmation field is required."
                      }
                    }
                  },
                  "Password confirmation min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "password_confirmation",
                        "type": "minlength",
                        "value": 6,
                        "message": "The password_confirmation must have at least 6 characters"
                      }
                    }
                  },
                  "Passwords not match": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "password_confirmation",
                        "type": "divergent",
                        "value": null,
                        "message": "The value of the password_confirmation field is different from the value of the password field"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "Driver license already in use": {
                    "value": {
                      "code": "user.driver_license.in_use",
                      "message": "There is already a registered user with this driver license."
                    }
                  },
                  "Email already in use": {
                    "value": {
                      "code": "user.email.in_use",
                      "message": "There is already a registered user with this email."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/refresh": {
      "post": {
        "tags": ["User"],
        "summary": "Refreshes user authentication",
        "description": "Refreshes user authentication",
        "requestBody": {
          "required": true,
          "description": "Refresh token data",
          "content": {
            "application/json": {
              "example": {
                "refresh_token": "..."
              },
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "example": {
                  "access_token": "...",
                  "refresh_token": "..."
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Refresh token required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "refresh_token",
                        "type": "required",
                        "value": null,
                        "message": "The refresh_token field is required."
                      }
                    }
                  },
                  "Refresh token invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "refresh_token",
                        "type": "invalid",
                        "value": null,
                        "message": "The refresh_token is not a valid UUID."
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "code": "user_token.not.exists",
                  "message": "Token not found."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "example": {
                  "code": "user_token.expired",
                  "message": "Token has expired."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/password/reset": {
      "post": {
        "tags": ["User"],
        "summary": "Reset a user's password",
        "description": "Reset a user's password",
        "requestBody": {
          "required": true,
          "description": "Password reset data",
          "content": {
            "application/json": {
              "example": {
                "token": "...",
                "new_password": "newpassword",
                "new_password_confirmation": "newpassword"
              },
              "schema": {
                "$ref": "#/components/schemas/PasswordReset"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Token required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "token",
                        "type": "required",
                        "value": null,
                        "message": "The token field is required."
                      }
                    }
                  },
                  "Token invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "token",
                        "type": "invalid",
                        "value": null,
                        "message": "The token is not a valid UUID."
                      }
                    }
                  },
                  "New password required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "new_password",
                        "type": "required",
                        "value": null,
                        "message": "The new_password field is required."
                      }
                    }
                  },
                  "New password min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "new_password",
                        "type": "minlength",
                        "value": 6,
                        "message": "The new_password must have at least 6 characters"
                      }
                    }
                  },
                  "New password confirmation required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "new_password_confirmation",
                        "type": "required",
                        "value": null,
                        "message": "The new_password_confirmation field is required."
                      }
                    }
                  },
                  "New password confirmation min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "new_password_confirmation",
                        "type": "minlength",
                        "value": 6,
                        "message": "The new_password_confirmation must have at least 6 characters"
                      }
                    }
                  },
                  "Passwords not match": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "new_password_confirmation",
                        "type": "divergent",
                        "value": null,
                        "message": "The value of the new_password_confirmation field is different from the value of the new_password field"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "code": "user_token.not.exists",
                  "message": "Token not found."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "example": {
                  "code": "user_token.expired",
                  "message": "Token has expired."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/password/forgot": {
      "post": {
        "tags": ["User"],
        "summary": "Starts the user password reset flow",
        "description": "Starts the user password reset flow",
        "requestBody": {
          "required": true,
          "description": "The email from the user",
          "content": {
            "application/json": {
              "example": {
                "email": "jane.driver@rentx.com"
              },
              "schema": {
                "$ref": "#/components/schemas/PasswordForgot"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Email required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "email",
                        "type": "required",
                        "value": null,
                        "message": "The email field is required."
                      }
                    }
                  },
                  "Email invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "email",
                        "type": "invalid",
                        "value": null,
                        "message": "The email is invalid."
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/profile": {
      "get": {
        "tags": ["User"],
        "summary": "Gets the profile data",
        "description": "Gets the profile data of the authenticated user",
        "security": [{ "userAuth": [] }],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "example": {
                  "id": "...",
                  "name": "John Driver",
                  "driver_license": "26786579871",
                  "email": "john.driver@rentx.com"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Access token missing": {
                    "value": {
                      "code": "token.not.provided",
                      "message": "Missing access token."
                    }
                  },
                  "Access token invalid": {
                    "value": {
                      "code": "token.invalid",
                      "message": "Invalid access token."
                    }
                  },
                  "Access token expired": {
                    "value": {
                      "code": "token.expired",
                      "message": "The token is expired."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "code": "user.not.exists",
                  "message": "No users found with the id provided."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands": {
      "post": {
        "tags": ["Brand", "Admin"],
        "summary": "Creates a new Car Brand",
        "description": "Performs the creation of a new Car Brand",
        "security": [{ "userAuth": [] }],
        "requestBody": {
          "required": true,
          "description": "Car Brand's data",
          "content": {
            "application/json": {
              "example": {
                "name": "Hyundai"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateCarBrandData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Name required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "required",
                        "value": null,
                        "message": "The name field is required."
                      }
                    }
                  },
                  "Name min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "minlength",
                        "value": 3,
                        "message": "The name must have at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Access token missing": {
                    "value": {
                      "code": "token.not.provided",
                      "message": "Missing access token."
                    }
                  },
                  "Access token invalid": {
                    "value": {
                      "code": "token.invalid",
                      "message": "Invalid access token."
                    }
                  },
                  "Access token expired": {
                    "value": {
                      "code": "token.expired",
                      "message": "The token is expired."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.brand.exists",
                  "message": "There is already a registered car brand with this name."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Brand"],
        "summary": "Query all Car Brands",
        "description": "Query all Car Brands",
        "parameters": [
          {
            "name": "sort_by",
            "description": "The sort by value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "name"],
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "description": "The order by value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "description": "The limit value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "description": "The offset value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "...",
                    "name": "Ferrari",
                    "created_at": "2022-01-01T13:00:00.000"
                  },
                  {
                    "id": "...",
                    "name": "Hyundai",
                    "created_at": "2022-01-02T13:00:00.000"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Sort by invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "sort_by",
                        "type": "required",
                        "value": null,
                        "message": "The value of the sort_by field is not one of created_at, name values"
                      }
                    }
                  },
                  "Order by invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "order_by",
                        "type": "required",
                        "value": null,
                        "message": "The value of the order_by field is not one of asc, desc values"
                      }
                    }
                  },
                  "Limit invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "number",
                        "value": null,
                        "message": "The value of limit must contain only numbers"
                      }
                    }
                  },
                  "Limit min value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "min",
                        "value": 1,
                        "message": "The min value of limit field is 1"
                      }
                    }
                  },
                  "Limit max value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "max",
                        "value": 100,
                        "message": "The max value of limit field is 100"
                      }
                    }
                  },
                  "Offset invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "offset",
                        "type": "number",
                        "value": null,
                        "message": "The value of offset must contain only numbers"
                      }
                    }
                  },
                  "Offset min value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "offset",
                        "type": "min",
                        "value": 0,
                        "message": "The min value of offset field is 0"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/brands/{id}": {
      "put": {
        "tags": ["Brand", "Admin"],
        "summary": "Updates an existing Car Brand",
        "description": "Performs an update of an existing Car Brand",
        "security": [{ "userAuth": [] }],
        "parameters": [{
          "in": "path",
          "required": true,
          "name": "id",
          "schema": {
            "type": "string"
          },
          "description": "The id of the Car Brand to update."
        }],
        "requestBody": {
          "required": true,
          "description": "Car Brand's data",
          "content": {
            "application/json": {
              "example": {
                "name": "Ferrari"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCarBrandData"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Car brand id required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "id",
                        "type": "required",
                        "value": null,
                        "message": "The id field is required."
                      }
                    }
                  },
                  "Car brand id invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "id",
                        "type": "invalid",
                        "value": null,
                        "message": "The id is not a valid UUID."
                      }
                    }
                  },
                  "Name required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "required",
                        "value": null,
                        "message": "The name field is required."
                      }
                    }
                  },
                  "Name min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "minlength",
                        "value": 3,
                        "message": "The name must have at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Access token missing": {
                    "value": {
                      "code": "token.not.provided",
                      "message": "Missing access token."
                    }
                  },
                  "Access token invalid": {
                    "value": {
                      "code": "token.invalid",
                      "message": "Invalid access token."
                    }
                  },
                  "Access token expired": {
                    "value": {
                      "code": "token.expired",
                      "message": "The token is expired."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.brand.not.exists",
                  "message": "No car brand found with the id provided."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.brand.exists",
                  "message": "There is already a registered car brand with this name."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/categories": {
      "post": {
        "tags": ["Category", "Admin"],
        "summary": "Creates a new Car Category",
        "description": "Performs the creation of a new Car Category",
        "security": [{ "userAuth": [] }],
        "requestBody": {
          "required": true,
          "description": "Car Category's data",
          "content": {
            "application/json": {
              "example": {
                "name": "SUV",
                "description": "Sport utility vehicle or sports utility vehicle: a large powerful car with an engine that supplies power to all four wheels."
              },
              "schema": {
                "$ref": "#/components/schemas/CreateCarCategoryData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Name required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "required",
                        "value": null,
                        "message": "The name field is required."
                      }
                    }
                  },
                  "Name min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "minlength",
                        "value": 3,
                        "message": "The name must have at least 3 characters"
                      }
                    }
                  },
                  "Description required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "description",
                        "type": "required",
                        "value": null,
                        "message": "The description field is required."
                      }
                    }
                  },
                  "Description min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "description",
                        "type": "minlength",
                        "value": 3,
                        "message": "The description must have at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Access token missing": {
                    "value": {
                      "code": "token.not.provided",
                      "message": "Missing access token."
                    }
                  },
                  "Access token invalid": {
                    "value": {
                      "code": "token.invalid",
                      "message": "Invalid access token."
                    }
                  },
                  "Access token expired": {
                    "value": {
                      "code": "token.expired",
                      "message": "The token is expired."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.category.exists",
                  "message": "There is already a registered car category with this name."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Category"],
        "summary": "Query all Car Categories",
        "description": "Query all Car Categories",
        "parameters": [
          {
            "name": "sort_by",
            "description": "The sort by value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "name"],
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "description": "The order by value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "description": "The limit value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "description": "The offset value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "...",
                    "name": "SUV",
                    "description": "Sport utility vehicle or sports utility vehicle: a large powerful car with an engine that supplies power to all four wheels.",
                    "created_at": "2022-01-01T13:00:00.000"
                  },
                  {
                    "id": "...",
                    "name": "Sedan",
                    "description": "A type of car with two or four doors and seats for at least four people",
                    "created_at": "2022-01-02T13:00:00.000"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Sort by invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "sort_by",
                        "type": "required",
                        "value": null,
                        "message": "The value of the sort_by field is not one of created_at, name values"
                      }
                    }
                  },
                  "Order by invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "order_by",
                        "type": "required",
                        "value": null,
                        "message": "The value of the order_by field is not one of asc, desc values"
                      }
                    }
                  },
                  "Limit invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "number",
                        "value": null,
                        "message": "The value of limit must contain only numbers"
                      }
                    }
                  },
                  "Limit min value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "min",
                        "value": 1,
                        "message": "The min value of limit field is 1"
                      }
                    }
                  },
                  "Limit max value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "max",
                        "value": 100,
                        "message": "The max value of limit field is 100"
                      }
                    }
                  },
                  "Offset invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "offset",
                        "type": "number",
                        "value": null,
                        "message": "The value of offset must contain only numbers"
                      }
                    }
                  },
                  "Offset min value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "offset",
                        "type": "min",
                        "value": 0,
                        "message": "The min value of offset field is 0"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/categories/{id}": {
      "put": {
        "tags": ["Category", "Admin"],
        "summary": "Updates an existing Car Category",
        "description": "Performs an update of an existing Car Category",
        "security": [{ "userAuth": [] }],
        "parameters": [{
          "in": "path",
          "required": true,
          "name": "id",
          "schema": {
            "type": "string"
          },
          "description": "The id of the Car Category to update."
        }],
        "requestBody": {
          "required": true,
          "description": "Car Category's data",
          "content": {
            "application/json": {
              "example": {
                "name": "Sedan",
                "description": "A type of car with two or four doors and seats for at least four people"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCarCategoryData"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Car category id required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "id",
                        "type": "required",
                        "value": null,
                        "message": "The id field is required."
                      }
                    }
                  },
                  "Car category id invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "id",
                        "type": "invalid",
                        "value": null,
                        "message": "The id is not a valid UUID."
                      }
                    }
                  },
                  "Name required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "required",
                        "value": null,
                        "message": "The name field is required."
                      }
                    }
                  },
                  "Name min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "minlength",
                        "value": 3,
                        "message": "The name must have at least 6 characters"
                      }
                    }
                  },
                  "Description required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "description",
                        "type": "required",
                        "value": null,
                        "message": "The description field is required."
                      }
                    }
                  },
                  "Description min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "description",
                        "type": "minlength",
                        "value": 3,
                        "message": "The description must have at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Access token missing": {
                    "value": {
                      "code": "token.not.provided",
                      "message": "Missing access token."
                    }
                  },
                  "Access token invalid": {
                    "value": {
                      "code": "token.invalid",
                      "message": "Invalid access token."
                    }
                  },
                  "Access token expired": {
                    "value": {
                      "code": "token.expired",
                      "message": "The token is expired."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.category.not.exists",
                  "message": "No car category found with the id provided."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.category.exists",
                  "message": "There is already a registered car category with this name."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/specifications": {
      "post": {
        "tags": ["Specification", "Admin"],
        "summary": "Creates a new Car Specification",
        "description": "Performs the creation of a new Car Specification",
        "security": [{ "userAuth": [] }],
        "requestBody": {
          "required": true,
          "description": "Car Specification's data",
          "content": {
            "application/json": {
              "example": {
                "name": "Three doors",
                "description": "A vehicle with three doors"
              },
              "schema": {
                "$ref": "#/components/schemas/CreateCarSpecificationData"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Name required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "required",
                        "value": null,
                        "message": "The name field is required."
                      }
                    }
                  },
                  "Name min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "minlength",
                        "value": 3,
                        "message": "The name must have at least 3 characters"
                      }
                    }
                  },
                  "Description required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "description",
                        "type": "required",
                        "value": null,
                        "message": "The description field is required."
                      }
                    }
                  },
                  "Description min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "description",
                        "type": "minlength",
                        "value": 3,
                        "message": "The description must have at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Access token missing": {
                    "value": {
                      "code": "token.not.provided",
                      "message": "Missing access token."
                    }
                  },
                  "Access token invalid": {
                    "value": {
                      "code": "token.invalid",
                      "message": "Invalid access token."
                    }
                  },
                  "Access token expired": {
                    "value": {
                      "code": "token.expired",
                      "message": "The token is expired."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.specification.exists",
                  "message": "There is already a registered car specification with this name."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Specification", "Admin"],
        "summary": "Query all Car Specifications",
        "description": "Query all Car Specifications",
        "security": [{ "userAuth": [] }],
        "parameters": [
          {
            "name": "sort_by",
            "description": "The sort by value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["created_at", "name"],
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "description": "The order by value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "description": "The limit value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "description": "The offset value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "...",
                    "name": "Three doors",
                    "description": "A vehicle with three doors",
                    "created_at": "2022-01-01T13:00:00.000"
                  },
                  {
                    "id": "...",
                    "name": "Two doors",
                    "description": "A vehicle with two doors",
                    "created_at": "2022-01-02T13:00:00.000"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Sort by invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "sort_by",
                        "type": "required",
                        "value": null,
                        "message": "The value of the sort_by field is not one of created_at, name values"
                      }
                    }
                  },
                  "Order by invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "order_by",
                        "type": "required",
                        "value": null,
                        "message": "The value of the order_by field is not one of asc, desc values"
                      }
                    }
                  },
                  "Limit invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "number",
                        "value": null,
                        "message": "The value of limit must contain only numbers"
                      }
                    }
                  },
                  "Limit min value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "min",
                        "value": 1,
                        "message": "The min value of limit field is 1"
                      }
                    }
                  },
                  "Limit max value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "limit",
                        "type": "max",
                        "value": 100,
                        "message": "The max value of limit field is 100"
                      }
                    }
                  },
                  "Offset invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "offset",
                        "type": "number",
                        "value": null,
                        "message": "The value of offset must contain only numbers"
                      }
                    }
                  },
                  "Offset min value": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "offset",
                        "type": "min",
                        "value": 0,
                        "message": "The min value of offset field is 0"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/specifications/{id}": {
      "put": {
        "tags": ["Specification", "Admin"],
        "summary": "Updates an existing Car Specification",
        "description": "Performs an update of an existing Car Specification",
        "security": [{ "userAuth": [] }],
        "parameters": [{
          "in": "path",
          "required": true,
          "name": "id",
          "schema": {
            "type": "string"
          },
          "description": "The id of the Car Specification to update."
        }],
        "requestBody": {
          "required": true,
          "description": "Car Specification's data",
          "content": {
            "application/json": {
              "example": {
                "name": "Two doors",
                "description": "A vehicle with two doors"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCarSpecificationData"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Car specification id required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "id",
                        "type": "required",
                        "value": null,
                        "message": "The id field is required."
                      }
                    }
                  },
                  "Car specification id invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "id",
                        "type": "invalid",
                        "value": null,
                        "message": "The id is not a valid UUID."
                      }
                    }
                  },
                  "Name required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "required",
                        "value": null,
                        "message": "The name field is required."
                      }
                    }
                  },
                  "Name min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "name",
                        "type": "minlength",
                        "value": 3,
                        "message": "The name must have at least 6 characters"
                      }
                    }
                  },
                  "Description required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "description",
                        "type": "required",
                        "value": null,
                        "message": "The description field is required."
                      }
                    }
                  },
                  "Description min length": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "description",
                        "type": "minlength",
                        "value": 3,
                        "message": "The description must have at least 3 characters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Access token missing": {
                    "value": {
                      "code": "token.not.provided",
                      "message": "Missing access token."
                    }
                  },
                  "Access token invalid": {
                    "value": {
                      "code": "token.invalid",
                      "message": "Invalid access token."
                    }
                  },
                  "Access token expired": {
                    "value": {
                      "code": "token.expired",
                      "message": "The token is expired."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.specification.not.exists",
                  "message": "No car specification found with the id provided."
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.specification.exists",
                  "message": "There is already a registered car specification with this name."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Specification", "Admin"],
        "summary": "Deletes an existing Car Specification",
        "description": "Performs a deletion of an existing Car Specification",
        "security": [{ "userAuth": [] }],
        "parameters": [{
          "in": "path",
          "required": true,
          "name": "id",
          "schema": {
            "type": "string"
          },
          "description": "The id of the Car Specification to update."
        }],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "examples": {
                  "Car specification id required": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "id",
                        "type": "required",
                        "value": null,
                        "message": "The id field is required."
                      }
                    }
                  },
                  "Car specification id invalid": {
                    "value": {
                      "code": "validation",
                      "message": "Validation error",
                      "validation": {
                        "field": "id",
                        "type": "invalid",
                        "value": null,
                        "message": "The id is not a valid UUID."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "examples": {
                  "Access token missing": {
                    "value": {
                      "code": "token.not.provided",
                      "message": "Missing access token."
                    }
                  },
                  "Access token invalid": {
                    "value": {
                      "code": "token.invalid",
                      "message": "Invalid access token."
                    }
                  },
                  "Access token expired": {
                    "value": {
                      "code": "token.expired",
                      "message": "The token is expired."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "example": {
                  "code": "car.specification.not.exists",
                  "message": "No car specification found with the id provided."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "code": "internal",
                  "message": "Internal server error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Credentials": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "PasswordReset": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "new_password": {
            "type": "string"
          },
          "new_password_confirmation": {
            "type": "string"
          }
        }
      },
      "PasswordForgot": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "CreateDriverData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "driver_license": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "password_confirmation": {
            "type": "string"
          }
        }
      },
      "CreateCarBrandData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateCarBrandData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CreateCarCategoryData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UpdateCarCategoryData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CreateCarSpecificationData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UpdateCarSpecificationData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "userAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Access-Token",
        "description": "The user's access token"
      }
    }
  }
}
